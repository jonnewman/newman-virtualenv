NMROOT=~/newman
ENV_NAME=$(basename $VIRTUAL_ENV)
if [ -n "$ENV_NAME" ] && [ -d $NMROOT/cfg/$ENV_NAME ]
then
    CFG_DIR=$NMROOT/cfg/$ENV_NAME
else
    CFG_DIR=$NMROOT/cfg/default
fi
if [ -n "$ENV_NAME" ] && [ -d $NMROOT/src/$ENV_NAME ]
then
    SRC=$NMROOT/src/$ENV_NAME
else
    SRC=$NMROOT/src/default
fi
UNITCFG=$CFG_DIR/testing.cfg
BASKET=http://newmandistrib:Ewt9Gleb@distrib.newmanonline.org.uk/basket
PYTHON_EGG_CACHE=$NMROOT/var/egg-cache/$ENV_NAME
if [ ! -d "$PYTHON_EGG_CACHE" ]
then
    mkdir -p $PYTHON_EGG_CACHE
fi
export SRC CFG_DIR BASKET UNITCFG NMROOT PYTHON_EGG_CACHE

cdnm()
{
    cd $NMROOT
}
cdpos()
{
    cd $SRC/newman-compat/lib/aa/Newman/POS
}

cdbr()
{
    cd $SRC/newman-compat/lib/aa/Newman/Server/Branch
}

cdutil() {
    cd $SRC/newman-compat/lib/aa/util/
}

cdvs(){
    cd $SRC/newman-compat/lib/aa/Newman/Server/Venue
}

cdbo0()
{
    cd $SRC/newman-compat/lib/aa/Newman/Web/BackOffice
}

cdbo() {
    cd $SRC/newman-backoffice/lib/newman/backoffice
}

cdsrc() { cd $SRC; }

cdcfg() { cd $CFG_DIR; }

cddb() { cd $SRC/newman-compat/lib/aa/Newman/db; }

if [[ $OSTYPE == 'cygwin' ]]; then
    if [[ $TERM = rxvt* ]] || [[ $TERM = xterm* ]] || [[ $TERM = screen* ]]
    then
        if type rlwrap&>/dev/null
        then
            PYTHON="rlwrap python -i"
        else
            PYTHON="python -i"
        fi
    else
            PYTHON="python"
    fi
    alias python=$PYTHON
fi

pos_run(){
CFG="$CFG_DIR/PointOfSale.cfg"
APP_DIR=$SRC/newman-compat/lib/aa/Newman/POS
echo -E $(cygpath -wa $CFG) > $APP_DIR/config_file.cfg
_OLD_PWD=$PWD
cd $APP_DIR > /dev/null
python PointOfSaleApp.py
cd $_OLD_PWD
}

vs_run(){
CFG="$CFG_DIR/VenueServer.cfg"
APP_DIR=$SRC/newman-compat/lib/aa/Newman/Server/Venue
echo -E $(cygpath -wa $CFG) > $APP_DIR/config_file.cfg
_OLD_PWD=$PWD
cd $APP_DIR > /dev/null
python VenueServer.py
cd $_OLD_PWD
}

br_run(){
CFG="$CFG_DIR/BranchServer.cfg"
APP_DIR=$SRC/newman-compat/lib/aa/Newman/Server/Branch
echo -E $(cygpath -wa $CFG) > $APP_DIR/config_file.cfg
_OLD_PWD=$PWD
cd $APP_DIR > /dev/null
python BranchServer.py
cd $_OLD_PWD
}

bo_run(){
_OLD_PWD=$PWD
cd $SRC/newman-backoffice  > /dev/null
\python bin/convert.py
cd $SRC/newman-backoffice/lib/newman/backoffice
python webapp.py
cd $_OLD_PWD
}

bo0_run(){
CFG="$CFG_DIR/BackOfficeServer.cfg"
APP_DIR=$SRC/newman-compat/lib/aa/Newman/Web/BackOffice
echo -E $(cygpath -wa $CFG) > $APP_DIR/config_file.cfg
cp $CFG $APP_DIR
_OLD_PWD=$PWD
cd $APP_DIR
echo "making BackOffice.py from cpy files..."
\python ../../../Cherrypy-1/cherrypy.py \
    -I ../../../Cherrypy-1/src          \
    -I ../../../Cherrypy-1/lib          \
    BackOffice.cpy                      \
    NewmanSpecialObject.cpy             \
    Reports.cpy;                        \
echo "building schema..."
\python Schema2COSchema.py
echo "start backoffice..."
python BackOffice.py
cd $_OLD_PWD
}

rebuild_db() {
BR_CFG=$CFG_DIR/BranchServer.cfg
echo -E $(cygpath -aw $BR_CFG) > $SRC/newman-compat/lib/aa/Newman/Server/Branch/config_file.cfg; 

VS_CFG=$CFG_DIR/VenueServer.cfg
echo -E $(cygpath -aw $VS_CFG) > $SRC/newman-compat/lib/aa/Newman/Server/Venue/config_file.cfg; 

CFG=$CFG_DIR/testing.cfg

BUILDER=newman-testing/lib/newman/testing/testdata/rebuild.py
if [ -f "$SRC/$BUILDER" ]; then
    python $(cygpath -wa $SRC/$BUILDER) -c $(cygpath -wa $CFG) $@
else
    echo "Can't find build script: $BUILDER"
    exit 1
fi
}

unpack_eggs(){
for i in `find . ! -name . -prune -type f | grep "./*.egg$"`;
do
    echo $is
    j=${i%.egg}.zip
    mv $i $j
    mkdir $i
    mv $j $i
    cd $i
    7za x $j
    rm $j
    cd ..
done
}

nm_package_link(){
old_pwd=$PWD
site_packages="`virtualenvwrapper_get_site_packages_dir`"
\cd $site_packages
echo -n "" > newman.pth
for pkg in $(\ls $SRC | grep newman- ) 
do
    if is_cygwin_win32py
    then
        echo -E "$(cygpath -wa $SRC)\\$pkg\\lib" > "$pkg.egg-link"
        echo -E "../" >> "$pkg.egg-link"
        echo -E "$(cygpath -wa $SRC)\\$pkg\\lib" >> newman.pth
    else
        echo -E "$SRC/$pkg/lib" > "$pkg.egg-link"
        echo -E "../" >> "$pkg.egg-link"
        echo -E "$SRC/$pkg/lib" >> newman.pth
    fi
done
cd $old_pwd
}

update_config_file_ip_address(){
ipaddr=$(\python -c "import socket, sys; sys.stdout.write(socket.gethostbyname(socket.gethostname())); sys.stdout.flush()")
#[venueservers] in BranchServer.cfg
sed -i -e "s/[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\(\$[0-9]*\|\)\(\s\|\)=\(\s\|\)bmnt/$ipaddr=bmnt/g" $CFG_DIR/BranchServer.cfg
#[pos] in VenueServer.cfg
sed -i -e "s/[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\(\$[0-9]*\|\)\(\s\|\)=\(\s\|\)bm1/$ipaddr=bm1/g"  $CFG_DIR/VenueServer.cfg
#[setup.branchserverip] in VenueServer.cfg
sed -i -e "s/^branchserverip\(\s\|\)=\(\s\|\)\(.*\)$/branchserverip=$ipaddr/g" $CFG_DIR/VenueServer.cfg
}
